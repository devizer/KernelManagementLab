# AGENT_OS=Linux|Darwin|Windows_NT

steps:

  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Say --Reset-Stopwatch

      is_qemu="$(sudo grep -rnw /sys/devices/platform -e QEMU 2>/dev/null || true)"
      # test -d /sys/firmware/qemu_fw_cfg && echo "Ampere on this Oracle Cloud"
      if [[ "$is_qemu" == *"QEMU"* ]]; then
        export QEMU=True
        export SHORT_FIO_TESTS=True
        echo "##vso[task.setvariable variable=QEMU]$QEMU"
        echo "##vso[task.setvariable variable=SHORT_FIO_TESTS]$SHORT_FIO_TESTS"
      fi
      Say "QEMU BUILD: [$QEMU]"

      echo "AGENT_OS: '${AGENT_OS}'"
      if [[ "$(uname -s)" == Darwin ]]; then
        Say "Installing coreutils on OSX"
        time brew install coreutils; 
      fi
      echo "uname -s: '$(uname -s)'"
      echo "uname -m: '$(uname -m)'"
      echo "PATH    : '$PATH'"
      dotnet --info
      export TMPDIR=$HOME/.tmp-dotnet; mkdir -p $TMPDIR
      DOTNET_TARGET_DIR=/usr/share/dotnet
      if [[ "$(uname -s)" != "Linux" ]]; then DOTNET_TARGET_DIR=$HOME/.dotnet; fi
      export DOTNET_TARGET_DIR
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      
      sudo ln -f -s $DOTNET_TARGET_DIR/dotnet /usr/local/bin/dotnet || true
      dotnet --info
    displayName: 'Install dotnet sdk 3.1 on linux/osx'
    
  - powershell: |
        pushd "$($Env:UserProfile)"
        Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
      
        $targetDir = "$($Env:ProgramFiles)\dotnet"; if (-not $targetDir) { "C:\Program Files\dotnet"; }
        foreach ($v in @("2.1", "2.2", "3.0", "3.1", "5.0")) {
          Write-Host "Installing .NET Core $v to [$targetDir]" -ForegroundColor Magenta
          ./dotnet-install.ps1 -InstallDir "$($targetDir)" -Channel $v;
        }
        popd
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: '[WIN] Install dotnet sdk 2.1 - 5.0'



  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       & uname -a
       & dotnet --info
       & mono --version
       & nvm --version
       & node --version
       & npm --version
       & yarn --version
       "PATH: [" + [Environment]::GetEnvironmentVariable("PATH") + "]"
    displayName: 'system info (pwsh)'

  - script: |
      uname -a
      if [[ -s /etc/debian_version ]]; then
        . /etc/os-release
        Say "OS: $PRETTY_NAME v$(cat /etc/debian_version)"
      fi;
      dotnet --info
      Say "mono: $(mono --version)"
      Say "nvm: $(nvm --version)"
      Say "node: $(node --version)"
      Say "npm: $(npm --version)"
      Say "yarn: $(yarn --version)"
      echo "PATH: [$PATH]"
      Say "/etc/environment"
      cat /etc/environment
      Say "env"
      printenv | sort
      rm -rf ~/.cache/fio || true
    condition: or(eq(variables['OS'], 'Linux'), eq(variables['OS'], 'OSX')) 
    displayName: 'system info (bash) and clear fio cache'

  - script: |
      time list-packages
      true
    condition: eq(variables['OS'], 'Linux')
    displayName: 'List Packages'

  - script: |
      dotnet restore || dotnet restore --disable-parallel
      echo 
    displayName: 'dotnet restore'

  - script: |
      dotnet test -f netcoreapp3.1 -c Release --collect:"XPlat Code Coverage" --logger trx -- NUnit.NumberOfTestWorkers=1
    displayName: 'dotnet test'

  - script: |
      printenv | sort
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Show-System-Stat || true
      echo ""
    displayName: 'System Stat'


  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false 
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'
      #pathToSources: # Optional
      #reportDirectory: # Optional
      #additionalCodeCoverageFiles: # Optional
      

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)'
      artifactName: '$(Agent.JobName)-$(Build.BuildNumber)'
      
