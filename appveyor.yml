version: '1.0.{build}'
max_jobs: 2
image:
- Visual Studio 2013
- Visual Studio 2015
- Visual Studio 2017
- Visual Studio 2019
# - Ubuntu

# services:
# - mssql2008r2sp2
      
configuration: 
#- Debug
- Release

platform: Any CPU
environment:
  # Don't report back to the mothership
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
init:
- ps: $Env:LABEL = "CI" + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, "0")
- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'
- cmd: set
- ps: |
    $names = @();
    foreach($path in @('HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server', 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SQL Server')) {
        try { $v = (get-itemproperty $path).InstalledInstances; $names += $v } catch {}
    }

    [System.Array]::Sort($names);
    foreach($sqlname in $names) {
        Write-Host "SQL: $sqlname"

        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | Out-Null
        [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.SqlWmiManagement") | Out-Null

        $serverName = $env:COMPUTERNAME
        $instanceName = $sqlname
        $wmi = new-object ('Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer')

        # Enable TCP/IP
        $uri = "ManagedComputer[@Name='$serverName']/ServerInstance[@Name='$instanceName']/ServerProtocol[@Name='Tcp']"
        $Tcp = $wmi.GetSmoObject($uri)
        $Tcp.IsEnabled = $true
        $TCP.alter()

        # Enable named pipes
        $uri = "ManagedComputer[@Name='$serverName']/ ServerInstance[@Name='$instanceName']/ServerProtocol[@Name='Np']"
        $Np = $wmi.GetSmoObject($uri)
        $Np.IsEnabled = $true
        $Np.Alter()

        # Set Alias
        # New-Item HKLM:\SOFTWARE\Microsoft\MSSQLServer\Client -Name ConnectTo | Out-Null
        # Set-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\MSSQLServer\Client\ConnectTo -Name '(local)' -Value "DBMSSOCN,$serverName\$instanceName" | Out-Null

        Set-Service SQLBrowser -StartupType Manual
        Start-Service SQLBrowser
        Start-Service "MSSQL`$$instanceName"
        net start "MSSQL`$$instanceName"
    }
    get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State

- ps: |
        "SQL SERVERS:"
        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft Name, DisplayName, StartMode, State
- ps: |
      pushd "$($Env:UserProfile)"
      Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '2.2.204';
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '3.0.100';
      $path="$($Env:UserProfile)\.dotnet;$($Env:UserProfile)\.dotnet\tools;$($Env:PATH)"; ${Env:PATH}=$path; [Environment]::SetEnvironmentVariable("PATH", $path, "User")
      dotnet --info
      popd
    
before_build:
- appveyor-retry dotnet restore -v Minimal
build_script:
# - ps: cd KernelManagementJam.Tests
- dotnet --info
# - dotnet build -c %CONFIGURATION% 

after_build:
- echo Im AFTER a BUILD. Nothing todo
test_script:
- dotnet test KernelManagementJam.Tests\KernelManagementJam.Tests.csproj -c %CONFIGURATION%
- dotnet test Universe.Dashboard.DAL.Tests\Universe.Dashboard.DAL.Tests.csproj -c %CONFIGURATION%
- ps: |
    # $Env:MSSQL_TEST_SERVER_2014="Server=(local)\SQL2017;Database=master;User ID=sa;Password=Password12!;Pooling=false"
    $Env:MSSQL_TEST_SERVER_1="Server=(local)\SQL2014;Database=master;UID=sa;PWD=Password12!;Pooling=false"
    dotnet test Universe.Dashboard.DAL.Tests\Universe.Dashboard.DAL.Tests.csproj -c %CONFIGURATION%
        
artifacts:
# - path: artifacts\**\*.*
cache:
- '%USERPROFILE%\.nuget\packages'
on_finish: # Run the demo to show that it works
# - dotnet artifacts\ConsoleApplication\ConsoleApplication.dll

