version: 'W3Top Integration Tests #{build}'
max_jobs: 1
image:
- Visual Studio 2019
# - Ubuntu

services:
    - mssql2017
      
configuration: 
- Release

platform: Any CPU
environment:
  # Install SQL Server Instances
  # SqlServers: 'SqlServer 2019: SQL_2019, SqlServer 2012: EXPRESS_2012, SqlServer 2008R2: EXPRESS_2008_R2'
  # SqlServers: 'SqlServer 2012: EXPRESS_2012'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

init:
- ps: $Env:LABEL = "CI" + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, "0")
- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'
- cmd: set
- ps: |

    # copy paste it
    $Work="$($Env:LocalAppData)"; if ($Work -eq "") { $Work="$($Env:UserProfile)"; }; $Work="$Work\Temp\Sql-Installers"
    if (-not (Test-Path $Work)) { New-Item -ItemType Directory -Path $Work -EA SilentlyContinue | out-null }
    Write-Host "Downloading SQL Installer Scripts to: $Work" -ForegroundColor Cyan
    (new-object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/devizer/glist/master/bin/SQL-Express/Sql-Setup-Bootstrap.ps1', "$Work\Sql-Setup-Bootstrap.ps1")
    pushd $Work; . .\Sql-Setup-Bootstrap.ps1; popd

    # copy paste it too
    if ($Env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2019") {
        try {
            Say "Upgrading PSReadLine on '$($Env:APPVEYOR_BUILD_WORKER_IMAGE)' image"
            Install-Module PSReadLine -AllowPrerelease -Force
            Say "PSReadLine Upgraded"
        } catch {
            Say "PSReadLine Upgrade Failed. $($_.Exception.GetType().Name) $($_.Exception.Message)"
        }
    }


- ps: |

    # Set-Service RemoteAccess -StartupType Manual
    # Start-Service RemoteAccess
    # Set-Service NetTcpPortSharing -StartupType Manual
    # Start-Service NetTcpPortSharing

      
- ps: |
      pushd "$($Env:UserProfile)"
      Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
      Say "Installing dotnet core 2.2"
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '2.2.204';
      Say "Installing dotnet core 3.0"
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '3.0.100';
      $path="$($Env:UserProfile)\.dotnet;$($Env:UserProfile)\.dotnet\tools;$($Env:PATH)"; ${Env:PATH}=$path; [Environment]::SetEnvironmentVariable("PATH", $path, "User")
      dotnet --info
      popd
    
before_build:
- ps: 'Say ".net Restore"' 
- appveyor-retry dotnet restore -v Minimal
build_script:
# - ps: cd KernelManagementJam.Tests
- dotnet --info
# - dotnet build -c %CONFIGURATION% 

after_build:
- echo Im AFTER a BUILD. Nothing todo
- ps:

test_script:
- ps: 'Say "Test KernelManagementJam.Tests"'
- dotnet test KernelManagementJam.Tests\KernelManagementJam.Tests.csproj -c %CONFIGURATION%
- ps: | 
    # --test-adapter-path:. --logger:Appveyor
    $cmd_test_args='Universe.Dashboard.DAL.Tests\Universe.Dashboard.DAL.Tests.csproj -c Release'
    Say "Test using SQLite ONLY"
    & dotnet test $cmd_test_args
- ps: |
      Say "Test using SQLite and pre-installed SQL2017"
      $Env:MSSQL_TEST_SERVER_2017="Server=(local)\SQL2017;Database=master;User ID=sa;Password=Password12!;Pooling=false"
      #$Env:MSSQL_TEST_SERVER_1="Server=(local)\SQL2014;Database=master;UID=sa;PWD=Password12!;Pooling=false"
      & dotnet test $cmd_test_args
- ps: |

    # install sql servers only if SQLite & tests pass
    Parse-SqlServers "SqlServer 2019: SQL_2019, SqlServer 2012: EXPRESS_2012, SqlServer 2008R2: EXPRESS_2008_R2, SqlServer 2008: EXPRESS_2008" | 
          % { Install-SqlServer $_ }
      
    Show-SqlServers

    # Newly installer 3 SQL Servers
    # $Env:MSSQL_TEST_SERVER_2019="Server=(local)\SQL_2019;Database=master;Integrated Security=SSPI;Pooling=false"
    $Env:MSSQL_TEST_SERVER_2019    ="Server=(local)\SQL_2019;        Integrated Security=SSPI;Pooling=false"
    $Env:MSSQL_TEST_SERVER_2012    ="Server=(local)\EXPRESS_2012;    Integrated Security=SSPI;Pooling=false"
    $Env:MSSQL_TEST_SERVER_2008    ="Server=(local)\EXPRESS_2008;    Integrated Security=SSPI;Pooling=false"
    $Env:MSSQL_TEST_SERVER_2008_R2 ="Server=(local)\EXPRESS_2008_R2; Integrated Security=SSPI;Pooling=false"
    # $Env:MSSQL_TEST_SERVER_2008_R2="Server=(local)\EXPRESS_2008_R2;Integrated Security=SSPI;Pooling=false"
    # $Env:MSSQL_TEST_SERVER_LocalDB="Server=(localdb)\MSSQLLocalDB;Integrated Security=SSPI;Pooling=false"

    #$Env:MSSQL_TEST_SERVER_1="Server=(local)\SQL2014;Database=master;UID=sa;PWD=Password12!;Pooling=false"
    & dotnet test $cmd_test_args
        
after_test:
- ps: |
    & "7z" a -t7z -mx=3 -ms=on "AppVeyor Build Folder.7z" .

cache:
- '%USERPROFILE%\.nuget\packages'
on_finish: # Run the demo to show that it works
# - dotnet artifacts\ConsoleApplication\ConsoleApplication.dll

artifacts:
# - path: artifacts\**\*.*
 - path: 'AppVeyor Build Folder.7z'
