version: 'W3Top Integration Tests #{build}'
max_jobs: 1
image:
- Visual Studio 2019

services:
- mssql2017
- mysql
- postgresql96
    
configuration: 
- Release

platform: Any CPU
environment:
  # Install SQL Server Instances
  # SqlServers: 'SqlServer 2019: SQL_2019, SqlServer 2012: EXPRESS_2012, SqlServer 2008R2: EXPRESS_2008_R2'
  # SqlServers: 'SqlServer 2012: EXPRESS_2012'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  matrix:

    - JOB: "Only SQLite 3.22"
      SqlServers: ''

    - JOB: "Plus MySQL 5.7.27"
      MYSQL_TEST_SERVER_1:       'Server=localhost;Database=mysql;Port=3306;Uid=root;Pwd=Password12!;Connect Timeout=15;Pooling=false;'

    - JOB: "Plus Postgres SQL 9.6.9"
      PGSQL_TEST_SERVER_1:       'Host=localhost;Port=5432;Database=postgres;Username=postgres;Password=Password12!;Timeout=15;Pooling=false;'

    - JOB: "Plus pre-installed SQL2017"
      SqlServers: ''
      MSSQL_TEST_SERVER_2017:    'Server=(local)\SQL2017;Database=master;User ID=sa;Password=Password12!;Pooling=false'

    - JOB: "Plus SQL 2019 RC Developer"
      SqlServers: 'SqlServer 2019 Developer: DEVELOPER_2019'
      MSSQL_TEST_SERVER_2019:    'Server=(local)\DEVELOPER_2019;    Integrated Security=SSPI;Pooling=false'

    - JOB: "Plus SQL 2016, 2014, 2012, 2008 R2 & 2008"
      SqlServers: 'SqlServer 2016: EXPRESS_2016, SqlServer 2014: EXPRESS_2014, SqlServer 2012: EXPRESS_2012, SqlServer 2008R2: EXPRESS_2008_R2, SqlServer 2008: EXPRESS_2008'
      MSSQL_TEST_SERVER_2016:    'Server=(local)\EXPRESS_2016;    Integrated Security=SSPI;Pooling=false'
      MSSQL_TEST_SERVER_2014:    'Server=(local)\EXPRESS_2014;    Integrated Security=SSPI;Pooling=false'
      MSSQL_TEST_SERVER_2012:    'Server=(local)\EXPRESS_2012;    Integrated Security=SSPI;Pooling=false'
      MSSQL_TEST_SERVER_2008_R2: 'Server=(local)\EXPRESS_2008_R2; Integrated Security=SSPI;Pooling=false'
      MSSQL_TEST_SERVER_2008:    'Server=(local)\EXPRESS_2008;    Integrated Security=SSPI;Pooling=false'

    - JOB: 'Plus SQL 2005 SP4 Express'
      SqlServers: 'SqlServer 2005: EXPRESS_2005'
      MSSQL_TEST_SERVER_2005:    'Server=(local)\EXPRESS_2005;    Integrated Security=SSPI;Pooling=false'


init:
- docker version -f '{{.Server.Experimental}}'
- docker version -f '{{.Server.Version}}'
- ps: |
    docker run -t --rm busybox "ls -la /usr/bin"
    "WTH"

- ps: $Env:LABEL = "CI" + $Env:APPVEYOR_BUILD_NUMBER.PadLeft(5, "0")
- cmd: bash -c 'time echo "Hello from BASH $(bash --version)"'
- cmd: set
- ps: |

    # copy paste it
    $Work="$($Env:LocalAppData)"; if ($Work -eq "") { $Work="$($Env:UserProfile)"; }; $Work="$Work\Temp\Sql-Installers"
    if (-not (Test-Path $Work)) { New-Item -ItemType Directory -Path $Work -EA SilentlyContinue | out-null }
    Write-Host "Downloading SQL Installer Scripts to: $Work" -ForegroundColor Cyan
    (new-object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/devizer/glist/master/bin/SQL-Express/Sql-Setup-Bootstrap.ps1', "$Work\Sql-Setup-Bootstrap.ps1")
    pushd $Work; . .\Sql-Setup-Bootstrap.ps1; popd

    # copy paste it too
    if ($Env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2019") {
        try {
            Say "Upgrading PSReadLine on '$($Env:APPVEYOR_BUILD_WORKER_IMAGE)' image"
            Install-Module PSReadLine -AllowPrerelease -Force
            Say "PSReadLine Upgraded"
        } catch {
            Say "PSReadLine Upgrade Failed. $($_.Exception.GetType().Name) $($_.Exception.Message)"
        }
    }


- ps: |

    # Set-Service RemoteAccess -StartupType Manual
    # Start-Service RemoteAccess
    # Set-Service NetTcpPortSharing -StartupType Manual
    # Start-Service NetTcpPortSharing

      
- ps: |
      Say "Installing dotnet core 2.2"
      pushd "$($Env:UserProfile)"
      Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile 'dotnet-install.ps1';
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '2.2.204';
      
      Say "Installing dotnet core 3.0"
      ./dotnet-install.ps1 -InstallDir '~/.dotnet' -Version '3.0.100';
      
      $path="$($Env:UserProfile)\.dotnet;$($Env:UserProfile)\.dotnet\tools;$($Env:PATH)"; ${Env:PATH}=$path; [Environment]::SetEnvironmentVariable("PATH", $path, "User")
      Say ".net core installed"
      dotnet --info
      popd
    
before_build:
- ps: 'Say ".net Restore"' 
- appveyor-retry dotnet restore -v Minimal
build_script:
  - ps: 'Say "Building"; dotnet build -c Release -v q'
    
test_script:
- ps: 'Say "Test KernelManagementJam.Tests.csproj"'
- dotnet test --test-adapter-path:. --logger:Appveyor KernelManagementJam.Tests\KernelManagementJam.Tests.csproj -c Release
- ps: |
    if ("$($Env:SqlServers)") {
      Parse-SqlServers "$($Env:SqlServers)" | % { Install-SqlServer $_ } 
      Show-SqlServers
    }
    
    Say "Test Universe.Dashboard.DAL.Tests.csproj"
    $cmd_test_args='dotnet test --test-adapter-path:. --logger:Appveyor Universe.Dashboard.DAL.Tests\Universe.Dashboard.DAL.Tests.csproj -c Release'
    & cmd /c $cmd_test_args
        
after_test:
- ps: |
    Say "Inspect Linux"
    docker run -t --rm busybox "find /" *> "Linux-Files.log"
    Say "Store project folder as 'AppVeyor Build Folder.7z' artifact"
    & "7z" a -t7z -mx=3 -ms=on "-xr!.git" "AppVeyor Build Folder.7z" .

cache:
- '%USERPROFILE%\.nuget\packages -> appveyor.yml'
on_finish: # Run the demo to show that it works
# - dotnet artifacts\ConsoleApplication\ConsoleApplication.dll

artifacts:
# - path: artifacts\**\*.*
 - path: 'AppVeyor Build Folder.7z'
