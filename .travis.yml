language: shell
git:
  depth: false
matrix:
  include:
  - name: Ubuntu 14.04
    os: linux
    dist: trusty
  - name: Ubuntu 16.04
    os: linux
    dist: xenial
    addons:
      chrome: stable
    # services:
    #  - xvfb
  - name: Ubuntu 18.04
    os: linux
    dist: bionic
  - name: OS X 10.12
    os: osx
    osx_image: xcode8.3
  - name: OS X 10.14
    os: osx
    osx_image: xcode10.2

before_script:
- |
  mkdir -p ~/build-artifacts/screenshots
  exec &> >(tee ~/build-artifacts/full-build-log.txt);
  echo "Build Started"
- |
  if [[ "$TRAVIS_OS_NAME" == "linux" && "$(lsb_release -c -s)" == xenial ]]; then
    sudo apt-get -f install
    sudo apt-get install libatk-bridge2.0-0 -y
    export NEED_DEPLOY=sure  
    # export DISPLAY=:99.0
    # sh -e /etc/init.d/xvfb start
    sleep 3
    google-chrome-stable --version || true
  fi
- |
  # UPGRADE DOCKER
  echo "Docker server BEFORE [$(docker version --format '{{.Server.Version}}')]" || true
  # url=https://raw.githubusercontent.com/devizer/glist/master/install-docker-on-debian.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -sSL $url) | bash
  echo "Docker server AFTER [$(docker version --format '{{.Server.Version}}')]" || true
  
script:
- google-chrome-stable --version || true
- if [[ "$(lsb_release -c -s)" == xenial ]]; then export NEED_DEPLOY=sure; fi; echo "NEED_DEPLOY = [$NEED_DEPLOY]"
- export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0
- git branch
- git rev-parse --abbrev-ref HEAD
# - (time nvm install node; echo "node is $(node --version)"; echo "npm is $(npm --version)";) 
# - nvm use default system; echo "node is $(node --version)"
# - npm install yarn -g || true; echo "yarn is $(yarn --version)" || true
- echo TRAVIS_OS_NAME is "$TRAVIS_OS_NAME"
- rm "$(command -v node)" 2>/dev/null || true

- |
   export TIMEFORMAT='REAL TIME: %1lR'

- export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1; export DOTNET_CLI_TELEMETRY_OPTOUT=1;
  export CI=false

- sudo ls -la || true; apt-cache policy dotnet-sdk-2.2 || true; apt-cache search dotnet-sdk || true

- |
  # install pv
  echo "A. ruby is $(ruby --version)" || true; echo "gem is $(gem --version)" || true
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew install jq mysql-client pv pigz coreutils
  else
    sudo apt-get install jq pv mysql-client postgresql-client pigz -y 
    ruby --version || true; gem --version || true
    mysql --version
  fi;
  echo "B. ruby is $(ruby --version)" || true; echo "gem is $(gem --version)" || true
  # - time gem search dpl | grep  -E '^dpl' | sort || true;

- |
  # Install Build Tools
  url=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-and-nodejs.sh;
  (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -ksSL $url) |
  bash -s dotnet node pwsh

- pushd build; ./inject-git-info.ps1; popd; cat bintray.json || true
- dotnet restore /v:m || dotnet restore /v:m || dotnet restore /v:m 

- |
  echo "Sqlite tests only"
  time dotnet test --no-restore -c Release # Test only sqlite provider on linux and osx

- pushd Universe.W3Top/ClientApp
- time yarn install
- time yarn test 
- time yarn build
- popd

- |
  time SKIP_CLIENTAPP=true dotnet publish -c Release -f netcoreapp2.2 /p:DefineConstants="DUMPS" -o bin/service /v:m
  pushd Universe.W3Top
  SKIP_CLIENTAPP=true dotnet publish -c Release -f netcoreapp2.2 /p:DefineConstants="DUMPS" -o bin/service /v:m
  cd bin/service
  export ASPNETCORE_URLS=http://0.0.0.0:5050
  sudo dotnet Universe.W3Top.dll >~/build-artifacts/w3top-server-for-integration-tests.log 2>&1 &
  sleep 15
  
  # dont waste time - add load for net chart
  nohup bash -c "sudo apt install speedtest-cli -y; speedtest-cli" >~/build-artifacts/speedtest-cli.log 2>&1 &

  # prepare data for disk benchmark history on travis-ci
  curl -i -H "Accept: application/json" \
      -H "Content-Type: application/json; charset=utf-8" \
      -X POST -d '{mountPath: "/", workingSet: "1024", randomAccessDuration: "5", disableODirect: false, blockSize: 4096, threads: 16}' \
      http://localhost:5050/api/benchmark/disk/start-disk-benchmark

  sleep 40
  cat ~/build-artifacts/w3top-server-for-integration-tests.log
  popd
  
- |
  if [[ "$TRAVIS_OS_NAME" == "linux" && "$(lsb_release -c -s)" == xenial ]]; then
    echo "HEADLESS INTEGRATION TESTS"
    pushd Universe.W3Top.HeadlessTests
    yarn install
    export W3TOP_APP_URL="http://localhost:5050"
    set -o pipefail
    bash App.tests.sh | tee ~/build-artifacts/frontend-integration-tests \
    && cp build/bin/* ~/build-artifacts/screenshots \
    && popd
  fi

- |
  # MULTIPLY DBs tests
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    set -o pipefail
    pushd Universe.Dashboard.DAL.Tests && bash -e local-tests.sh | tee ~/build-artifacts/backend-integration-tests.log && popd
  fi
  
- docker logs sql-2019-for-tests | head -9999 || true

- |
   # publish self-contained
   pushd Universe.W3Top
   # skipping as we use publish-public.sh
   # time dotnet publish -c Release /p:DefineConstants="DUMPS" -o bin/service2 --self-contained -r linux-x64 /v:m
   popd
  
- export SKIP_GIT_PUSH=true; sudo mkdir -p /transient-builds; sudo chown $(whoami) /transient-builds;
- bash -e publish-public.sh
- echo Current dir is $(pwd)
- ls -la /transient-builds/publish/KernelManagementLab/Universe.W3Top/bin || true
- |
  verFile=./build/AppGitInfo.json; ver=$(cat $verFile | jq -r ".Version");
  echo "VER is  $ver";
  mkdir -p public-bintray/$ver;
  cp /transient-builds/publish/KernelManagementLab/Universe.W3Top/bin/*.tar.gz* public-bintray/$ver/;
  cp build/AppGitInfo.json public-bintray/$ver/version.json
  tar czf public-bintray/$ver/build-log.tar.gz ~/build-artifacts
- cat bintray.json || true
- pwd; df -h; ls -la public-bintray/$ver
- ls -la ~/build-artifacts

deploy:

  provider: bintray
  file: "bintray.json"
  user: "devizer"
  key:
    secure: ktXky+XuUVh3M+ZPi9W+I8n6HOfPA84MVXja/3u2vSzDExJQrTMkqW86GbgVIs//JSDgh6slFuQCj14c5MgQqc4nIfuv/UwqbEPHmRsd1bPIrfj+Lh6hNB/TIYibuYe7Fi1ULJhCkQlTGtl4pR93EFSK2jb1sK6SJX8HLAPr5lBiIsUfJddEZ7MxAvppXaekn/huKZqRs4hP2GVzYWjA83N8muqgQmm8/2TAxVNtTnRkEO2cFVYAyphEAJt5nEagaabIdUfQNZWlpCCxCREeSbsLXlYjn4chhDEzBnP4NEfhBujAtQDOiMvPG42ynyFIWwY0MqfmhqHyQiqMFX/jMmINIvLfINlsypJf9UTlAR80XXJNEC90KwJ+WI12j+iwLLd2ZoI7fCrBssREenJdOapav9uqfyWJlbaKwvEjvBk/+aDvabOkfEQMb/NIx5zhgiWpvuT7gDw+NarKu2yJzqWW9EsVYLlGrA57YybWVdZbrISmRuKSy3gLTn3ZYbZzX56kafGmzaWIhjLtv9jRJeZiH1zj8OWyDZpIoRMfWQDgxNQZPhDEk0vyRhp6Ty5EGmH7dKbsCkDFDqDSKWaFpfhyHhP3LeiOCI0/WS319ZKIoqePOAPEWhhTKftHeyYPW2ndUidady9UNXhmlNomihFMaW9DTlH4PCysKkrlrjY=
  # passphrase: "Optional. In case a passphrase is configured on Bintray and GPG signing is used"
  skip_cleanup: true # to upload artifacts created during the build
  on:
    condition: ($NEED_DEPLOY = sure) && ($TRAVIS_TEST_RESULT = 0)
