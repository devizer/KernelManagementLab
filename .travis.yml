language: shell
git:
  depth: false
matrix:
  include:
#  - name: Ubuntu 14.04
#    os: linux
#    dist: trusty
  - name: Ubuntu 16.04
    os: linux
    dist: xenial
    addons:
      chrome: stable
    # services:
    #  - xvfb
#  - name: Ubuntu 18.04
#    os: linux
#    dist: bionic
#  - name: OS X 10.12
#    os: osx
#    osx_image: xcode8.3
#  - name: OS X 10.13
#    os: osx
#    osx_image: xcode9.3
#  - name: OS X 10.14
#    os: osx
#    osx_image: xcode10.2

# https://docs.travis-ci.com/user/caching/
# cache:
#   directories:
#     - /home/travis/.cache/yarn
#     - /home/travis/.nuget/packages 

before_script:
- 'script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash'
- |
  DOTNET_Url=https://dot.net/v1/dotnet-install.sh; 
  mkdir -p ~/.dotnet/tools;
  sudo mkdir -p /opt/dotnet;
  export PATH="/opt/dotnet:$HOME/.dotnet/tools:$PATH"
  export DOTNET_ROOT="/opt/dotnet"
  mkdir -p /etc/dotnet
  echo '/opt/dotnet' > /etc/dotnet/install_location
  # for arm it starts from 2.1
  try-and-retry curl -o /tmp/_dotnet-install.sh -ksSL $DOTNET_Url

  Say "Installing .NET Core 2.1 SDK"
  time try-and-retry sudo -E bash /tmp/_dotnet-install.sh -c 2.1 -i /opt/dotnet
  Say "Installing .NET Core 2.2 SDK"
  time try-and-retry sudo -E bash /tmp/_dotnet-install.sh -c 2.2 -i /opt/dotnet
  Say "Installing .NET Core 3.0 SDK"
  time try-and-retry sudo -E bash /tmp/_dotnet-install.sh -c 3.0 -i /opt/dotnet
  Say "Installing BenchmarkDotNet.Tool (globally)"
  try-and-retry dotnet tool install -g BenchmarkDotNet.Tool || true
  Say "Installing .NET Core 3.1 SDK"
  time try-and-retry sudo -E bash /tmp/_dotnet-install.sh -c 3.1 -i /opt/dotnet
  Say "Installing .NET Core 5.0 SDK"
  time try-and-retry sudo -E bash /tmp/_dotnet-install.sh -c 5.0 -i /opt/dotnet
  Say ".NET Core benchmark tool version: [$(dotnet benchmark --version 2>&1)]"
  
- lscpu || true
- |
  mkdir -p ~/build-artifacts/screenshots
  exec &> >(tee ~/build-artifacts/full-build-log.log); exec 2>&1
  echo "Build Started. \$HOME is [$HOME]"
- |
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    echo "127.0.0.1 w3top-build-server" | sudo tee -a /etc/hosts
    sudo hostname w3top-build-server
  fi
- |
  if [[ "$TRAVIS_OS_NAME" == "linux" && "$(lsb_release -c -s)" == xenial ]]; then
    try-and-retry sudo apt-get -f install
    try-and-retry sudo apt-get install libatk-bridge2.0-0 -y
    export NEED_DEPLOY=sure  
    # export DISPLAY=:99.0
    # sh -e /etc/init.d/xvfb start
    sleep 3
    google-chrome-stable --version || true
  fi
  
- |
  # UPGRADE DOCKER
  echo "Docker server BEFORE [$(docker version --format '{{.Server.Version}}')]" || true
  # url=https://raw.githubusercontent.com/devizer/glist/master/install-docker-on-debian.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -sSL $url) | bash
  echo "Docker server AFTER [$(docker version --format '{{.Server.Version}}')]" || true
  
- |
  # install pv, jq, postgres and mysql clients
  echo "A. ruby is $(ruby --version)" || true; echo "gem is $(gem --version)" || true
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    time try-and-retry brew install jq mysql-client pv pigz coreutils | grep 'jq\|mysql-client\|pv\|pigz\|coreutils'
    echo "content of /usr/local/opt/coreutils/libexec/gnubin:"
    ls -la /usr/local/opt/coreutils/libexec/gnubin
    sudo ln -s /usr/local/bin/gsha256sum /usr/local/bin/sha256sum || true

    script=https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    # nvm install --lts node  # 10.16.3
    nvm install node        # 12.12
    try-and-retry npm install yarn npm npm-check-updates --global
    node --version

  else
    # sudo smart-apt-install jq pv mysql-client postgresql-client pigz 
    sudo smart-apt-install jq pv mysql-client pigz; 
    bash -e build-postgresql-client.sh || smart-apt-install postgresql-client
    ruby --version || true; gem --version || true
    mysql --version
    pg_dump --version; pg_dump --help
    true
  fi;
  echo "B. ruby is $(ruby --version)" || true; echo "gem is $(gem --version)" || true
  # - time gem search dpl | grep  -E '^dpl' | sort || true;

script:
- export CI=false
- google-chrome-stable --version || true
- if [[ "$(lsb_release -c -s)" == xenial ]]; then export NEED_DEPLOY=sure; fi; echo "NEED_DEPLOY = [$NEED_DEPLOY]"
- export DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0
- git branch
- git rev-parse --abbrev-ref HEAD
# - (time nvm install node; echo "node is $(node --version)"; echo "npm is $(npm --version)";) 
# - nvm use default system; echo "node is $(node --version)"
# - npm install yarn -g || true; echo "yarn is $(yarn --version)" || true
- echo TRAVIS_OS_NAME is "$TRAVIS_OS_NAME"
- rm "$(command -v node)" 2>/dev/null || true

- |
   export TIMEFORMAT='REAL TIME: %1lR'

- export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1; export DOTNET_CLI_TELEMETRY_OPTOUT=1;
  export CI=false

- |
  # Install Build Tools
  url=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-and-nodejs.sh;
  (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -ksSL $url) |
  bash -s dotnet node pwsh
  if [[ "$TRAVIS_OS_NAME" == linux ]]; then
    # dotnet 3 rc? no, it is already released
    echo ""
    # script=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-core-3-x64.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | sudo bash -s /opt/dotnet
    # upgrade-2-to-3
  fi

- pushd build; ./inject-git-info.ps1; popd; cat bintray.json || true
- Say "dotnet restore"; dotnet restore /v:m || dotnet restore /v:m || dotnet restore /v:m 

- |
  Say "Sqlite tests only"
  time dotnet test --no-restore -c Release | cat # Test only sqlite provider on linux and osx

- pushd Universe.W3Top/ClientApp
- time yarn install
- time yarn test 
- node --version; time yarn build
- popd

- |
  time SKIP_CLIENTAPP=true dotnet publish -c Release -f netcoreapp2.2 /p:DefineConstants="DUMPS" -o bin/service /v:m
  pushd Universe.W3Top
  SKIP_CLIENTAPP=true dotnet publish -c Release -f netcoreapp2.2 /p:DefineConstants="DUMPS" -o bin/service /v:m
  cd bin/service
  export ASPNETCORE_URLS=http://0.0.0.0:5050
  sudo dotnet Universe.W3Top.dll >~/build-artifacts/w3top-server-for-integration-tests.log 2>&1 &
  sleep 15
  
  # dont waste time - add load for net chart
  nohup bash -c "sudo apt install speedtest-cli -y; speedtest-cli" >~/build-artifacts/speedtest-cli.log 2>&1 &

  # prepare data for disk benchmark history on travis-ci
  curl -i -H "Accept: application/json" \
      -H "Content-Type: application/json; charset=utf-8" \
      -X POST -d '{mountPath: "/", workingSet: "1024", randomAccessDuration: "5", disableODirect: false, blockSize: 4096, threads: 16}' \
      http://localhost:5050/api/benchmark/disk/start-disk-benchmark

  sleep 40
  echo ""
  cat ~/build-artifacts/w3top-server-for-integration-tests.log
  popd
  
- |
  if [[ "$TRAVIS_OS_NAME" == "linux" && "$(lsb_release -c -s)" == xenial ]]; then
    Say "HEADLESS INTEGRATION TESTS"
    pushd Universe.W3Top.HeadlessTests
    yarn install
    export W3TOP_APP_URL="http://localhost:5050"
    set -o pipefail
    bash App.tests.sh 2>&1 | tee ~/build-artifacts/frontend-integration-tests.log \
      && cp build/bin/* ~/build-artifacts/screenshots \
      && popd
  fi

- |
  # MULTIPLY DBs tests
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    Say "TEST ALL the DB PROVIDERS"
    set -o pipefail
    pushd Universe.Dashboard.DAL.Tests \
      && bash -e local-tests.sh 2>&1 | tee ~/build-artifacts/backend-integration-tests.log \
      && cd bin/Release/netcoreapp*/bin \
      && mkdir -p ~/build-artifacts \
      && cp -r * ~/build-artifacts \
      && popd
  fi
  
- docker logs sql-2019-for-tests | head -9999 || true

- |
   # publish self-contained
   pushd Universe.W3Top
   # skipping as we use publish-public.sh
   # time dotnet publish -c Release /p:DefineConstants="DUMPS" -o bin/service2 --self-contained -r linux-x64 /v:m
   popd
  
- export SKIP_GIT_PUSH=true; sudo mkdir -p /transient-builds; sudo chown $(whoami) /transient-builds;
- bash -e publish-public.sh
- Say "FINISH. Current dir is $(pwd)"
- ls -la /transient-builds/publish/KernelManagementLab/Universe.W3Top/bin || true
- |
  verFile=./build/AppGitInfo.json; ver=$(cat $verFile | jq -r ".Version");
  echo "VER is  $ver";
  mkdir -p public-bintray/$ver;
  cp /transient-builds/publish/KernelManagementLab/Universe.W3Top/bin/*.tar.gz* public-bintray/$ver/;
  cp build/AppGitInfo.json public-bintray/$ver/version.json
  
  find ~/build-artifacts -name '*.log' | while read log; do
    echo LOG FILE [$log]
    sed -i -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" "${log}"
  done
  
  dir=$(pwd); pushd ~/build-artifacts
    echo "${TRAVIS_BUILD_WEB_URL}" > "Ver ${ver} [${TRAVIS_BUILD_NUMBER}].txt"
    tar czf $dir/public-bintray/$ver/build-log-and-screenshots.tar.gz *
  popd
  
- cat bintray.json || true
- pwd; df -h; ls -la public-bintray/$ver
- ls -la ~/build-artifacts
- printenv | grep TRAVIS | sort
- printf '"\n\nSYSTEM STAT\n"; Show-System-Stat || true '

deploy:

  provider: bintray
  file: "bintray.json"
  user: "devizer"
  key:
    secure: ktXky+XuUVh3M+ZPi9W+I8n6HOfPA84MVXja/3u2vSzDExJQrTMkqW86GbgVIs//JSDgh6slFuQCj14c5MgQqc4nIfuv/UwqbEPHmRsd1bPIrfj+Lh6hNB/TIYibuYe7Fi1ULJhCkQlTGtl4pR93EFSK2jb1sK6SJX8HLAPr5lBiIsUfJddEZ7MxAvppXaekn/huKZqRs4hP2GVzYWjA83N8muqgQmm8/2TAxVNtTnRkEO2cFVYAyphEAJt5nEagaabIdUfQNZWlpCCxCREeSbsLXlYjn4chhDEzBnP4NEfhBujAtQDOiMvPG42ynyFIWwY0MqfmhqHyQiqMFX/jMmINIvLfINlsypJf9UTlAR80XXJNEC90KwJ+WI12j+iwLLd2ZoI7fCrBssREenJdOapav9uqfyWJlbaKwvEjvBk/+aDvabOkfEQMb/NIx5zhgiWpvuT7gDw+NarKu2yJzqWW9EsVYLlGrA57YybWVdZbrISmRuKSy3gLTn3ZYbZzX56kafGmzaWIhjLtv9jRJeZiH1zj8OWyDZpIoRMfWQDgxNQZPhDEk0vyRhp6Ty5EGmH7dKbsCkDFDqDSKWaFpfhyHhP3LeiOCI0/WS319ZKIoqePOAPEWhhTKftHeyYPW2ndUidady9UNXhmlNomihFMaW9DTlH4PCysKkrlrjY=
  # passphrase: "Optional. In case a passphrase is configured on Bintray and GPG signing is used"
  skip_cleanup: true # to upload artifacts created during the build
  on:
    tags: true
    # condition: ($NEED_DEPLOY = sure) && ($TRAVIS_TEST_RESULT = 0)
    condition: ($TRAVIS_DIST = xenial) && ($TRAVIS_TEST_RESULT = 0)
    # 
